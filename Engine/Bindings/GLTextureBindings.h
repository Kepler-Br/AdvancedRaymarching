#ifndef SDL2OPENGL_GLTEXTUREBINDINGS_H
#define SDL2OPENGL_GLTEXTUREBINDINGS_H

#include <GL/glew.h>
#include <GL/gl.h>
#include "../Incapsulated/GLError.h"

/// @brief Everything that is about OpenGL's texture managing.
class GLTextureBindings
{
public:

private:

public:
    /// @brief Encapsulation over OpenGL texture creation.
    /// @throw GLErrorException if texture generation fails.<br/>
    /// Possible reasons:<br/>
    /// GL_INVALID_VALUE is generated if n is negative.
    /// @return OpenGL pointer to created texture.
    /// @see Khronos OpenGL reference:<br/>
    /// <a href="https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glGenTextures.xhtml">glGenTextures</a>
    static GLuint generateTexture();
    /// @brief Encapsulation over OpenGL texture binding.
    /// @throw GLErrorException if texture binding fails.<br/>Possible reasons:<br/>
    /// GL_INVALID_ENUM is generated if target is not one of the allowable values.<br/>
    /// GL_INVALID_VALUE is generated if texture is not a name returned from a previous call to glGenTextures.<br/>
    /// GL_INVALID_OPERATION is generated if texture was previously created with a target that doesn't match that of target.
    /// @param target Specifies the target to which the texture is bound. Must be one of GL_TEXTURE_1D,
    /// GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_1D_ARRAY, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_RECTANGLE,
    /// GL_TEXTURE_CUBE_MAP, GL_TEXTURE_CUBE_MAP_ARRAY, GL_TEXTURE_BUFFER, GL_TEXTURE_2D_MULTISAMPLE or
    /// GL_TEXTURE_2D_MULTISAMPLE_ARRAY.
    /// @param Specifies OpenGL texture pointer.
    /// @see Khronos OpenGL reference:<br/>
    /// <a href="https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glBindTexture.xhtml">glBindTexture</a>
    static void bindTexture(GLenum target, GLuint texturePointer);
    /// @brief Encapsulation over OpenGL texture upload routine.
    /// @throw GLErrorException if texture upload fails.<br/>Possible reasons:<br/>
    /// See <a href="https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glTexImage2D.xhtml">glTexImage2D</a>
    /// for full error list(It's big.).
    /// @param target Specifies the target texture. Must be GL_TEXTURE_2D, GL_PROXY_TEXTURE_2D,
    /// GL_TEXTURE_1D_ARRAY, GL_PROXY_TEXTURE_1D_ARRAY, GL_TEXTURE_RECTANGLE,
    /// GL_PROXY_TEXTURE_RECTANGLE, GL_TEXTURE_CUBE_MAP_POSITIVE_X,
    /// GL_TEXTURE_CUBE_MAP_NEGATIVE_X, GL_TEXTURE_CUBE_MAP_POSITIVE_Y,
    /// GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, GL_TEXTURE_CUBE_MAP_POSITIVE_Z,
    /// GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, or GL_PROXY_TEXTURE_CUBE_MAP.
    /// @param levelOfDetail Specifies the level-of-detail number.
    /// Level 0 is the base image level. Level n is the nth mipmap reduction image.
    /// If target is GL_TEXTURE_RECTANGLE or GL_PROXY_TEXTURE_RECTANGLE, level must be 0.
    /// @param internalTextureColorFormat Specifies the number of color components in the texture.
    /// Must be GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL, GL_RED, GL_RG, GL_RGB, GL_RGBA...
    /// See Khronos documentation for more information.
    /// @param width Texture width.
    /// @param height Texture height.
    /// @param textureColorFormat Specifies the format of the pixel data.
    /// The following symbolic values are accepted: GL_RED, GL_RG, GL_RGB, GL_BGR,
    /// GL_RGBA, GL_BGRA, GL_RED_INTEGER, GL_RG_INTEGER, GL_RGB_INTEGER, GL_BGR_INTEGER,
    /// GL_RGBA_INTEGER, GL_BGRA_INTEGER, GL_STENCIL_INDEX, GL_DEPTH_COMPONENT, GL_DEPTH_STENCIL.
    /// @param dataType Specifies the data type of the pixel data.
    /// The following symbolic values are accepted: GL_UNSIGNED_BYTE, GL_BYTE, GL_UNSIGNED_SHORT,
    /// GL_SHORT, GL_UNSIGNED_INT, GL_INT, GL_HALF_FLOAT, GL_FLOAT, GL_UNSIGNED_BYTE_3_3_2,
    /// GL_UNSIGNED_BYTE_2_3_3_REV, GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_5_6_5_REV,
    /// GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_4_4_4_4_REV, GL_UNSIGNED_SHORT_5_5_5_1,
    /// GL_UNSIGNED_SHORT_1_5_5_5_REV, GL_UNSIGNED_INT_8_8_8_8, GL_UNSIGNED_INT_8_8_8_8_REV,
    /// GL_UNSIGNED_INT_10_10_10_2, and GL_UNSIGNED_INT_2_10_10_10_REV.
    /// @param data Specifies a pointer to the image data in RAM.
    /// @see Khronos OpenGL reference:<br/>
    /// <a href="https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glTexImage2D.xhtml">glTexImage2D</a>
    static void uploadTexture2D(const GLenum target, const GLint levelOfDetail, GLenum internalTextureColorFormat,
                                const GLsizei width, const GLsizei height, const GLenum textureColorFormat,
                                const GLenum dataType, const GLvoid *data);
    /// @brief Generate mipmaps for a specified texture object.
    /// @throw GLErrorException if mipmap generation fails.<br/>
    /// Possible reasons:<br/>
    /// GL_INVALID_ENUM is generated by glGenerateMipmap if target is not one of the accepted texture targets.<br/>
    /// GL_INVALID_OPERATION is generated by glGenerateTextureMipmap if texture is not the name of
    /// an existing texture object.<br/>
    /// GL_INVALID_OPERATION is generated if target is GL_TEXTURE_CUBE_MAP or GL_TEXTURE_CUBE_MAP_ARRAY,
    /// and the specified texture object is not cube complete or cube array complete, respectively.
    /// @param textureTarget Specifies the target to which the texture object is bound.
    /// Must be one of GL_TEXTURE_1D, GL_TEXTURE_2D, GL_TEXTURE_3D, GL_TEXTURE_1D_ARRAY,
    /// GL_TEXTURE_2D_ARRAY, GL_TEXTURE_CUBE_MAP, or GL_TEXTURE_CUBE_MAP_ARRAY.
    /// @see Khronos OpenGL reference:<br/>
    /// <a href="https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glGenerateMipmap.xhtml">glGenerateMipmap</a>
    static void generateMipmap(const GLenum textureTarget);
    /// @brief Set texture parameters.
    /// @throw GLErrorException if setting parameter fails.<br/>
    /// Possible reasons:<br/>
    /// See <a href="https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glTexParameter.xhtml">glTexParameteri</a>
    ///  for full error list(It's big.).
    /// @param textureTarget Specifies the target to which the texture is bound for
    /// glTexParameter functions. Must be one of GL_TEXTURE_1D, GL_TEXTURE_1D_ARRAY,
    /// GL_TEXTURE_2D, GL_TEXTURE_2D_ARRAY, GL_TEXTURE_2D_MULTISAMPLE,
    /// GL_TEXTURE_2D_MULTISAMPLE_ARRAY, GL_TEXTURE_3D, GL_TEXTURE_CUBE_MAP,
    /// GL_TEXTURE_CUBE_MAP_ARRAY, or GL_TEXTURE_RECTANGLE.
    /// @param parameterName Specifies the symbolic name of a
    /// single-valued texture parameter. pname can be one of the following:
    /// GL_DEPTH_STENCIL_TEXTURE_MODE, GL_TEXTURE_BASE_LEVEL, GL_TEXTURE_COMPARE_FUNC,
    /// GL_TEXTURE_COMPARE_MODE, GL_TEXTURE_LOD_BIAS, GL_TEXTURE_MIN_FILTER,
    /// GL_TEXTURE_MAG_FILTER, GL_TEXTURE_MIN_LOD, GL_TEXTURE_MAX_LOD, GL_TEXTURE_MAX_LEVEL,
    /// GL_TEXTURE_SWIZZLE_R, GL_TEXTURE_SWIZZLE_G, GL_TEXTURE_SWIZZLE_B, GL_TEXTURE_SWIZZLE_A,
    /// GL_TEXTURE_WRAP_S, GL_TEXTURE_WRAP_T, or GL_TEXTURE_WRAP_R.
    /// @param parameter For the scalar commands, specifies the value of parameterName. Ex. GL_TEXTURE_MIN_FILTER,
    /// GL_TEXTURE_MAG_FILTER etc.
    /// @see Khronos OpenGL reference:<br/>
    /// <a href="https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glTexParameter.xhtml">glTexParameteri</a>
    static void setParameterInt(const GLenum textureTarget, const GLenum parameterName, const GLint parameter);

private:
    GLTextureBindings() = default;

};


#endif //SDL2OPENGL_GLTEXTUREBINDINGS_H
