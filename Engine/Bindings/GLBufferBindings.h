#ifndef SDL2OPENGL_GLBUFFERBINDINGS_H
#define SDL2OPENGL_GLBUFFERBINDINGS_H

#include <GL/glew.h>
#include <GL/gl.h>
#include "../Incapsulated/GLError.h"

/// @brief Everything that is related to OpenGL buffer operations.
class GLBufferBindings
{
public:

private:

public:
    /// @brief Generate OpenGL buffer pointer.
    /// @throw GLErrorException if buffer generation fails.<br/>
    /// Possible reasons:<br/>
    /// GL_INVALID_VALUE is generated if number of buffers is negative.
    /// (Should not be triggered: number of buffers to generate always 1.)
    /// @return Pointer to OpenGL buffer.
    /// @see Khronos OpenGL reference:<br/>
    /// <a href="https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glGenBuffers.xhtml">glGenBuffers</a>
    static GLuint generateBuffer();
    /// @brief Upload data to OpenGL buffer.
    /// @throw GLErrorException if upload fails.<br/>
    /// Possible reasons:<br/>
    /// GL_INVALID_ENUM is generated by glBufferData if target is not one of the accepted buffer targets.<br/>
    /// GL_INVALID_ENUM is generated if usage is not GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW,
    /// GL_STATIC_READ, GL_STATIC_COPY, GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY.<br/>
    /// GL_INVALID_VALUE is generated if size is negative.<br/>
    /// GL_INVALID_OPERATION is generated by glBufferData if the reserved buffer object name 0 is bound to target.<br/>
    /// GL_INVALID_OPERATION is generated by glNamedBufferData if buffer is not the name of an existing buffer object.<br/>
    /// GL_INVALID_OPERATION is generated if the GL_BUFFER_IMMUTABLE_STORAGE flag of the buffer object is GL_TRUE.<br/>
    /// GL_OUT_OF_MEMORY is generated if the GL is unable to create a data store with the specified size.
    /// @tparam T Data type that should be uploaded to OpenGL buffer. Should be simple type like int, char, etc.
    /// @param array Data array that should be uploaded to OpenGL buffer.
    /// @param size Size of the data array in bytes.
    /// @param target Specifies the target to which the buffer object is bound for glBufferData. Ex. GL_ARRAY_BUFFER<br/>
    /// See <a href="https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glBufferData.xhtml">glBufferData</a>
    /// for possible target values.
    /// @param usage Specifies the expected usage pattern of the data store. The symbolic constant must be
    /// GL_STREAM_DRAW, GL_STREAM_READ, GL_STREAM_COPY, GL_STATIC_DRAW, GL_STATIC_READ, GL_STATIC_COPY,
    /// GL_DYNAMIC_DRAW, GL_DYNAMIC_READ, or GL_DYNAMIC_COPY.
    /// @see Khronos OpenGL reference:<br/>
    /// <a href="https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glBufferData.xhtml">glBufferData</a>
    template<typename T>
    static void uploadDataToBuffer(T *array, size_t size, const GLenum target, const GLenum usage)
    {
        glBufferData(target, size, array, usage);
        GLError::throwExceptionIfGLError("glBufferData");
    }
    /// @brief Delete(deallocate) OpenGL buffer.
    /// @throw GLErrorException if upload fails.<br/>
    /// Possible reasons:<br/>
    /// GL_INVALID_VALUE is generated if n is negative.
    /// @param bufferPointer Pointer to OpenGL buffer. Silently ignores 0's and names that do not correspond to
    /// existing buffer objects.
    /// @see Khronos OpenGL reference:<br/>
    /// <a href="https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glDeleteBuffers.xhtml">glDeleteBuffers</a>
    static void deleteBuffer(const GLuint bufferPointer);
    /// @brief Enable a generic vertex attribute array of current bound buffer.
    /// @throw GLErrorException if enabling attribute fails.<br/>
    /// Possible reasons:<br/>
    /// GL_INVALID_OPERATION is generated by glEnableVertexAttribArray if no vertex array object is bound.<br/>
    /// GL_INVALID_VALUE is generated if index is greater than or equal to GL_MAX_VERTEX_ATTRIBS.
    /// @param attribute Specifies the index of the generic vertex attribute to be enabled.
    /// @see Khronos OpenGL reference:<br/>
    /// <a href="https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glEnableVertexAttribArray.xhtml">glEnableVertexAttribArray</a>
    static void enableAttribute(GLuint attribute);
    /// @brief Disable a generic vertex attribute array of current bound buffer.
    /// @throw GLErrorException if disabling attribute fails.<br/>
    /// Possible reasons:<br/>
    /// GL_INVALID_OPERATION is generated by glDisableVertexAttribArray if no vertex array object is bound.<br/>
    /// GL_INVALID_VALUE is generated if index is greater than or equal to GL_MAX_VERTEX_ATTRIBS.
    /// @param attribute Specifies the index of the generic vertex attribute to be enabled.
    /// @see Khronos OpenGL reference:<br/>
    /// <a href="https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glEnableVertexAttribArray.xhtml">glDisableVertexAttribArray</a>
    static void disableAttribute(GLuint attribute);
    /// @brief Define an array of generic vertex attribute data.
    /// @throw GLErrorException if setup fails.<br/>
    /// Possible reasons:<br/>
    /// GL_INVALID_VALUE is generated if vertexAttributeIndex is greater than or equal to GL_MAX_VERTEX_ATTRIBS.<br/>
    /// GL_INVALID_VALUE is generated if size is not 1, 2, 3, 4 or GL_BGRA.<br/>
    /// GL_INVALID_ENUM is generated if type is not an accepted value.<br/>
    /// GL_INVALID_VALUE is generated if stride is negative.<br/>
    /// GL_INVALID_OPERATION is generated if vertexComponentCount is GL_BGRA and type is not GL_UNSIGNED_BYTE,
    /// GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV.<br/>
    /// GL_INVALID_OPERATION is generated if dataType is GL_INT_2_10_10_10_REV or GL_UNSIGNED_INT_2_10_10_10_REV
    /// and size is not 4 or GL_BGRA.<br/>
    /// GL_INVALID_OPERATION is generated if dataType is GL_UNSIGNED_INT_10F_11F_11F_REV and size is not 3.<br/>
    /// GL_INVALID_OPERATION is generated by glVertexAttribPointer if size is GL_BGRA and shouldBeNormalized is
    /// GL_FALSE.<br/>
    /// GL_INVALID_OPERATION is generated if zero is bound to the GL_ARRAY_BUFFER buffer object binding point
    /// and the pointer argument is not NULL.
    /// @param vertexAttributeIndex Specifies the index of the generic vertex attribute to be modified.
    /// @param vertexComponentCount Specifies the number of components per generic vertex attribute.
    /// Must be 1, 2, 3, 4. Additionally, the symbolic constant GL_BGRA is accepted by glVertexAttribPointer.
    /// The initial value is 4.
    /// @param dataType Specifies the data type of each component in the array.
    /// The symbolic constants GL_BYTE, GL_UNSIGNED_BYTE, GL_SHORT, GL_UNSIGNED_SHORT, GL_INT, and GL_UNSIGNED_INT
    /// are accepted by glVertexAttribPointer and glVertexAttribIPointer.
    /// @param shouldBeNormalized Specifies whether fixed-point data values should be normalized (GL_TRUE)
    /// or converted directly as fixed-point values (GL_FALSE) when they are accessed.
    /// @param dataStride Specifies the byte offset between consecutive generic vertex attributes.
    /// If stride is 0, the generic vertex attributes are understood to be tightly packed in the array.
    /// @param dataOffset Specifies a offset of the first component of the first generic vertex attribute
    /// in the array in the data store of the buffer currently bound to the GL_ARRAY_BUFFER target.
    /// @see Khronos OpenGL reference:<br/>
    /// <a href="https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glVertexAttribPointer.xhtml">glVertexAttribPointer</a>
    static void setupAttributePointer(const GLuint vertexAttributeIndex, const GLint vertexComponentCount,
                                      const GLenum dataType, const GLboolean shouldBeNormalized,
                                      const GLsizei dataStride, const GLvoid *dataOffset);
    /// @brief Generate vertex array object.
    /// @throw GLErrorException if generating fails.<br/>
    /// Possible reasons:<br/>
    /// GL_INVALID_VALUE is generated if n is negative. (Should not be triggered. N is always 1 in this function.)
    /// @see Khronos OpenGL reference:<br/>
    /// <a href="https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glGenVertexArrays.xhtml">glGenVertexArrays</a>
    static GLuint generateVertexArray();
    /// @brief Bind vertex array object.
    /// @throw GLErrorException if binding fails.<br/>
    /// Possible reasons:<br/>
    /// GL_INVALID_OPERATION is generated if array is not zero or the name of a vertex array object previously returned
    /// from a call to glGenVertexArrays.
    /// (<a href="https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glBindVertexArray.xhtml">
    /// What? See original documentation
    /// </a>).
    /// @see Khronos OpenGL reference:<br/>
    /// <a href="https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glBindVertexArray.xhtml">glBindVertexArray</a>
    static void bindVertexArray(const GLuint Vao);
private:
    GLBufferBindings() = default;

};

#endif //SDL2OPENGL_GLBUFFERBINDINGS_H
